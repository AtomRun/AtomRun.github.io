<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>cLeeX</title>
    <updated>2020-12-22T13:00:49.778Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <subtitle>成为独当一面的后端程序员</subtitle>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2020, cLeeX</rights>
    <entry>
        <title type="html"><![CDATA[归并排序模板]]></title>
        <id>http://localhost:4000/post/gui-bing-pai-xu-mo-ban/</id>
        <link href="http://localhost:4000/post/gui-bing-pai-xu-mo-ban/">
        </link>
        <updated>2020-12-22T12:58:52.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">        if (l &gt;= r) {
            return;
        }
        int mid = l + r &gt;&gt; 1;
        merge_sort(q, l, mid);
        merge_sort(q, mid + 1, r);

        int k = 0, i = l, j = mid + 1;
        while (i &lt;= mid &amp;&amp; j &lt;= r) {
            if (q[i] &lt;= q[j]) {
                temp[k++] = q[i++];
            } else {
                temp[k++] = q[j++];
            }
        }
        while (i &lt;= mid) {
            temp[k++] = q[i++];
        }
        while (j &lt;= r) {
            temp[k++] = q[i++];
        }
        for (i = l, j = 0; i &lt;= r; i++, j++) {
            q[i] = temp[j];
        }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速排序模板]]></title>
        <id>http://localhost:4000/post/kuai-su-pai-xu-mo-ban/</id>
        <link href="http://localhost:4000/post/kuai-su-pai-xu-mo-ban/">
        </link>
        <updated>2020-12-22T12:58:00.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">        if (l &gt;= r) {
            return;
        }
        int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];
        while (i &lt; j) {
            do {
                i++;
            } while (q[i] &lt; x);
            do {
                j--;
            } while (q[j] &gt; x);
            if (i&lt;j){
                int temp = q[i];
                q[i] = q[j];
                q[j] = temp;
            }
        }
        quickSort(q,l,j);
        quickSort(q,j+1,r);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode.389.找不同]]></title>
        <id>http://localhost:4000/post/leetcode389zhao-bu-tong/</id>
        <link href="http://localhost:4000/post/leetcode389zhao-bu-tong/">
        </link>
        <updated>2020-12-18T07:22:40.000Z</updated>
        <summary type="html"><![CDATA[<p>该题有很多解法，异或或者Hash的方式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>该题有很多解法，异或或者Hash的方式。</p>
<!-- more -->
<p>根据题意可以知道该题目范围在s和t的范围在<code>a-z</code>，并且新数组比老数组多了一个字符，所以可以将这道题目的解法将s和t转换为数组，然后遍历s将每个字母转为ASCII放到res中。然后再遍历t将其中的字符转为ASCII直接相减，这样剩下的res就是要找到的数据。</p>
<pre><code class="language-java">class Solution {
    public char findTheDifference(String s, String t) {         
        int res = 0;
        for (int c : t.toCharArray()) res += c;
        for (int c : s.toCharArray()) res -= c;
        return (char) res;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类加载器综述]]></title>
        <id>http://localhost:4000/post/lei-jia-zai-qi-zong-shu/</id>
        <link href="http://localhost:4000/post/lei-jia-zai-qi-zong-shu/">
        </link>
        <updated>2020-12-18T03:27:48.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="类加载执行流程">类加载执行流程</h1>
]]></summary>
        <content type="html"><![CDATA[<h1 id="类加载执行流程">类加载执行流程</h1>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/12/15/zjFPqdeBZgx1VMQ.png" alt="" loading="lazy"></figure>
<ol>
<li>类的加载时通过类的全路径名包+类名，查找到类的字节码文件，将字节码文件转换为二进制数据读入到内存中存放到元空间中。利用字节码文件创建一个Class对象存放在堆区中。这个过程就是类加载器来完成的。</li>
<li>验证阶段，确定字节码文件的正确性。准备阶段，为了类的静态变量开辟内存并初始化值只针对static变量，例如一个static int a = 5，准备阶段只是将a设置为0，而初始化阶段才会设置为5，而final的变量，在编译的时候就分配好了内存。解析阶段将类中的符号引用转换为实际引用。</li>
<li>初始化阶段，类加载器将会先加载父类的字节码并且先初始化，执行静态变量赋值和静态代码块，成员变量也会被初始化。</li>
<li>准备阶段为类的静态变量分配内存，并将静态变量初始化为默认值，这个阶段只为静态变量分配内存并设置默认值。</li>
<li>初始化阶段将静态变量设置为5，以static int = 5举例。</li>
<li>而final static修饰的变量，编译的时候就分配好了，也不会分配实例变量的内存。</li>
<li>解析阶段是将符号引用转换为直接引用。符号即使用符号描述的，直接引用是直接指向目标的指针相对偏移量或者定位目标类的地址。</li>
<li>初始化，若该类有父加载器，先加载父类，执行静态变量赋值和静态代码块。成员变量也会被初始化</li>
</ol>
<h1 id="类加载器">类加载器</h1>
<h2 id="虚拟机内置加载器">虚拟机内置加载器</h2>
<h3 id="根类加载器bootstrap">根类加载器(BootStrap)</h3>
<p>是虚拟机的最底层类加载器，使用C++实现，没有父加载器，也没有继承ClassLoader类，主要职责就是加载系统属性“sun.boot.classpath”这个路径下的核心类库。即&lt;JAVA_HOME&gt;\JRE\LIB。出于安全考虑，这个类只会加载java、javax、sun开头的类。</p>
<pre><code class="language-java">//核心类库rt.jar，我们去这里取出一个类
ClassLoader classLoader = Object.class.getClassLoader();
System.out.println(&quot;object类的加载器是&quot;+classLoader);//结果是null
</code></pre>
<h3 id="扩展类加载器exstension">扩展类加载器(Exstension)</h3>
<p>主要加载&lt;JAVA_HOME&gt;\JRE\LIB\ext目录下的类库或者系统变量&quot;java.ext.dirs&quot;</p>
<pre><code class="language-java">//ExtensionClassLoader
ClassLoader service = DNSNameService.class.getClassLoader();
System.out.println(&quot;DNSNameService类的加载器是&quot;+service);
//DNSNameService类的加载器是sun.misc.Launcher$ExtClassLoader@a09ee92
</code></pre>
<h3 id="系统类加载器">系统类加载器</h3>
<p>称之为应用类加载器，他的父类是扩展类加载器，不是指继承关系。它负责从classpath环境变量或者系统属性java.classpath所指定的目录中加载类。它是用户自定义的类加载器的默认父加载器。一般情况下，该类加载器是程序中默认的类加载器，可以通过ClassLoader.getSystemClassLoader()直接获得。</p>
<pre><code class="language-java">// APPClassLoader
ClassLoader loader = ClassLoaderDemo1.class.getClassLoader();
System.out.println(&quot;本类的加载器是&quot;+loader);
//本类的加载器是sun.misc.Launcher$AppClassLoader@18b4aac2
</code></pre>
<p>我们自己写的类都是由这个AppClassLoader加载的</p>
<h2 id="总结">总结</h2>
<p>类的加载都是由上述三种类加载器相互配合执行的，同时我们还可以自定义类加载器，需要注意的是，Java虚拟机对于Class文件采用的是按需加载的方式，也就是说，需要使用该类的时候才会加载它的Class文件到内存生成Class对象。并且加载Class文件的时候，Java虚拟机使用的是双亲委派机制。即把类加载的请求交给父加载器处理。是一种任务委派模式。</p>
<h1 id="双亲委派机制">双亲委派机制</h1>
<p>除了根类加载器之外，其他的类加载器都需要有自己的父加载器，从JDK1.2开始，类的加载使用双亲委派机制，这种机制能够很好的保护java程序的安全。除了虚拟机自带的根类加载器之外，其余的类加载器都有唯一的父加载器。</p>
<p>比如，如果需要classLoader加载一个类的时候，该ClassLoader先委托自己的父加载器加载这个类，如果父加载器能够加载，则由父加载器加载，否则才由ClassLoader自己加载这个类。即每个加载器都很懒，加载时都让父加载器去尝试加载。一直到根类加载器。注意：双亲委派机制的父子关系并非面向对象的继承关系。而是通过组合模式来复用父加载器代码。如下图。</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2020/12/15/re5Tn8oRMExVg4H.png" alt="" loading="lazy"></figure>
<h2 id="双亲委派的好处">双亲委派的好处：</h2>
<ol>
<li>避免类重复加载，当父加载器加载了之后，子类就没有必要再加载一次。</li>
<li>考虑到安全因素，Java核心API中定义类型不会被随意替换。假设通过网络传递一个名为java.lang.Object的类，通过双亲委派机制传递到启动类加载器。而启动类加载器在核心API发现这个名字的类，发现这个类已经被加载了，不会重新加载网络传递的java.lang.Object，而是直接返回加载过的Object.class。这样可以防止核心API被随意篡改。</li>
</ol>
<h2 id="classloader">ClassLoader</h2>
<p>所有的类加载器(除了根加载器)都要继承java.lang.ClassLoader。它是一个抽象类，主要的方法如下</p>
<h3 id="loadclass">loadClass</h3>
<p>这个方法是双亲委派模型的代码实现。需要注意的是，只有父类加载器加载不到类的时候，会调用findClass进行类的查找，所以，在定义自己的类加载器，不要覆盖该方法，而应该覆盖findClass方法。</p>
<p>模板方法设计模式： 父类里有loadClass方法，不管哪个子类，它们loadClass过程是一样的，自己干的代码不一样。 所以覆盖的不是loadClass而是findClass方法。得到Class文件中二进制数据，用defineClass()把Class文件转换成字节码。 通俗的讲就是张老师说的爸爸的问题，类加载器都有自己的父类。loadClass方法是先找他的爸爸，如果爸爸干不了，就找findClass方法自己完成加载。 findClass方法是直接自己完成加载，得到Class文件的二进制数据，再用defineClass把Class文件转换成字节码，不找他的父类加载器</p>
<p>因为我们不覆盖loadClass，那么自定义加载器加载类的时候调用的就是父类的loadClass，父类加载不了那么就会调用findClass，子类有find Class，所以会使用子类的findClass，所以我们要实现自己的findClass</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2020/12/15/vD2A4BoYpmUqNCd.png" alt="" loading="lazy"></figure>
<h3 id="findclass">findClass</h3>
<h3 id="defineclass">defineClass</h3>
<p>将byte字节解析为虚拟机能够识别的Class对象，defineClass方法通常和findClass一起使用。在自定义类加载器时，会直接覆盖ClassLoader的findClass方法获取要加载类的字节码，然后调用defineClass方法生成Class对象。</p>
<h3 id="resolveclass">resolveClass</h3>
<p>连接指定的类</p>
<h2 id="urlclassloader">URLClassLoader</h2>
<p>在java.net包中，JDK提供了一个更加易用的类加载器URLClassLoader，扩展了ClassLoader，能够从本地或者网络上指定的位置加载类。我们使用该类作为自定义的类加载器使用。</p>
<pre><code class="language-java">public URLClassLoader(URL[] urls)://指定要加载的类所在的URL地址，父类加载器默认为系统类加载器

public URLClassLoader(URL[] urls,ClassLoader parent)://指定要加载的类所在的URL地址，并且指定父类加载器
</code></pre>
<pre><code class="language-java">public class Demo{
    //将该类打包
    public Demo(){
        System.out.println(&quot;Hello&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public Class ClassLoaderDemo2{
    public static void main(String args){
        File file = new File(&quot;d:/&quot;);
        URI uri = file.toURI();
        URL url = uri.toURL();
        //构建classLoader
        URLClassLoader classloader = new URLClassLoader(new URL[url]);
        classLoader.getParent.sout;//默认是系统类加载器
        //加载 
        Clazz clzz = classLoader.loadClass(&quot;com.xxx.Demo&quot;);
        clzz.newInstance();
    }
}
</code></pre>
<h2 id="自定义类加载器">自定义类加载器</h2>
<p>如果要自定义类加载器，要继承ClassLoader并且覆盖findClass</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Synchronized简述]]></title>
        <id>http://localhost:4000/post/synchronized-jian-shu/</id>
        <link href="http://localhost:4000/post/synchronized-jian-shu/">
        </link>
        <updated>2020-12-17T09:33:32.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="synchronized的底层原理">Synchronized的底层原理</h1>
]]></summary>
        <content type="html"><![CDATA[<h1 id="synchronized的底层原理">Synchronized的底层原理</h1>
<!-- more -->
<p>Synchronized的原理是和jvm指令和monitor有关系的。假设在代码中使用了Synchronized关键字，那么在底层编译后的jvm指令中会出现monitorenter和monitorexit两个指令</p>
<pre><code class="language-java">monitorenter
//对应的代码
monitorexit
</code></pre>
<p>因为每个对象都会对应一个monitor对象，一个类对象也对应一个monitor，如果要对这个对象加锁，那么必须获取这个对象关联monitor的lock锁。</p>
<p>在monitor中有一个计数器，默认为0，每当有一个线程想要获取对象的锁，会去看monitor是否是0，如果是0就说明没有枷锁，那么将0改为1，表明该线程获取了该对象的锁。</p>
<p>例如又来了一个线程想要获取该对象的锁，这个时候新的线程就会发现对象的monitor对象计数器为1。所以线程1加锁成功，线程2加锁失败，进入阻塞等待的状态。</p>
<p>为什么说synchronized是可重入的？</p>
<pre><code class="language-java">public class Widget {
    public synchronized void doSomething() {
        System.out.println(&quot;方法1执行...&quot;);
        doOthers();
    }
    public synchronized void doOthers() {
        System.out.println(&quot;方法2执行...&quot;);
    }
}
</code></pre>
<p>可重入加锁的意思就是：当一个线程拿到一个对象锁，执行了一段代码之后，释放了该锁。类似上面这种情况，在doSomething中拿到了该对象的锁，那么进入内层的方法doOthers的时候，还可以继续使用之前的锁执行，区别就是将monitor的计数器+1。也叫递归锁，以此类推。当该线程从里面的方法释放的时候就会减去计数器的值直至减到0。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HashMap的十万个为什么]]></title>
        <id>http://localhost:4000/post/hashmap-de-shi-wan-ge-wei-shi-me/</id>
        <link href="http://localhost:4000/post/hashmap-de-shi-wan-ge-wei-shi-me/">
        </link>
        <updated>2020-12-17T08:59:08.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="hashmap">HashMap</h1>
<p>HashMap是java中以一个键值对形式存储的集合，存储删除速度和查询修改速度都很快</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="hashmap">HashMap</h1>
<p>HashMap是java中以一个键值对形式存储的集合，存储删除速度和查询修改速度都很快</p>
<!-- more -->
<h1 id="为什么hashmap存取都很快">为什么HashMap存取都很快？</h1>
<ol>
<li>原因是因为底层数据结构使用了数组+链表的形式(1.7)</li>
<li>jdk1.8使用了数组+链表+红黑树。如果比较发现链表的长度已经大于map中定义的TREEIFY_THRESHOLD - 1的话，也就是7，就会将链表转换为红黑树，将数据存到红黑树中，这里为什么要减掉1呢，其实这块也是面试官必问的，也就是我刚开始提到的一个面试题:什么时候链表会转换成红黑树? map里面定义的是8，这里减了1.是因为在我们进行遍历链表之前，我们已经取出来了数组上面的第一个链表元素了，后面的遍历是基于这个元素的next进行遍历的，所以这里就需要将TREEIFY_THRESHOLD-1作为转换条件判断。</li>
<li>但是当执行resize操作时，当桶中元素的数量少于UNTREEIFY_THRESHOLD时使用链表来代替树即退化，UNTREEIFY_THRESHOLD默认值为6</li>
<li>当我们取值的时候，直接将key的hashcode与数组长度拿到下标，这样的话取值就是(O)1。</li>
<li>使用数组+链表的话，当链表过长，HashMap读很长的链表需要遍历，时间复杂度退化，这个时候就引申出来红黑树了。</li>
</ol>
<h1 id="hashmap怎么计算下标的">HashMap怎么计算下标的？</h1>
<p>我们来看hash方法，即如何将key转换为hashcode</p>
<pre><code class="language-java">static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}
</code></pre>
<p>先判断了key是否为空，不为空就调用了key的hashcode方法赋值给h并且和h右移16位后的h再次进行异或运算即用h的低位异或h的高位</p>
<figure data-type="image" tabindex="1"><img src="https://pic3.zhimg.com/80/4acf898694b8fb53498542dc0c5f765a_720w.jpg?source=1940ef5c" alt="hashmap" loading="lazy"></figure>
<p>右位移16位，正好是32bit的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p>
<p>HashMap计算下标的时候是在putVal的时候</p>
<pre><code class="language-java">if ((p = tab[i = (n - 1) &amp; hash]) == null)
    tab[i] = newNode(hash, key, value, null);
</code></pre>
<p>其中的<code>i = (n-1) &amp; hash</code>i就是下标，下标的计算方式为数组长度&amp;hash值。</p>
<h1 id="为什么每次是2的整数次幂进行扩容">为什么每次是2的整数次幂进行扩容？</h1>
<p>首先每次扩容都是当前容量的两倍，例如16-&gt;32-&gt;64</p>
<p>比如：</p>
<p>十进制: 201314</p>
<p>二进制: 11 0001 0010 0110 0010</p>
<p><strong>假设初始化大小为16</strong></p>
<p>15转化为二进制: 1111</p>
<p>index : 11 0001 0010 0110 0010 &amp; 1111 =0010 为 3</p>
<p><strong>假设初始化大小为10</strong></p>
<p>10转化为二进制: 1010</p>
<p>index: 11 0001 0010 0110 0010 &amp; 1010=0010 为 3</p>
<p>因为是将二进制进行按位于，(16-1) 是 1111,<strong>末位是1</strong>，这样也能保证计算后的index既可以是奇数也可以是偶数，并且只要传进来的key足够分散，均匀那么按位于的时候获得的index就会减少重复，这样也就减少了hash的碰撞以及hashMap的查询效率。</p>
<p>那么到了这里你也许会问？ 那么就然16可以，是不是只要是2的整数次幂就可以呢？</p>
<p>答案是肯定的。那为什么不是8,4呢？ 因为是8或者4的话很容易导致map扩容影响性能，如果分配的太大的话又会浪费资源，所以就使用16作为初始大小</p>
<h1 id="为什么需要length-1">为什么需要length-1？</h1>
<h2 id="1-保证元素尽可能的均匀分布">1. 保证元素尽可能的均匀分布</h2>
<p>由上边的分析可知，length一定是一个偶数，length - 1一定是一个奇数。假设现在数组的长度length为16，减去1后length - 1就是15，15对应的二进制是：1111。现在假设有两个元素需要插入，一个哈希值是8，二进制是1000，一个哈希值是9，二进制是1001。和1111“与”运算后，结果分别是1000和1001，它们被分配在了数组的不同位置，这样，哈希的分布非常均匀。那么，如果数组长度是奇数呢？减去1后length - 1就是偶数了，偶数对应的二进制最低位一定是 0，例如14二进制1110。对上面两个数子分别“与”运算，得到1000和1000。结果都是一样的值。那么，哈希值8和9的元素都被存储在数组同一个index位置的链表中。在操作的时候，链表中的元素越多，效率越低，因为要不停的对链表循环比较。</p>
<h2 id="2-保证不会发生数组越界">2. 保证不会发生数组越界</h2>
<p>首先我们要知道的是，在HashMap，数组的长度按规定一定是<strong>2的幂</strong>。因此，数组的长度的二进制形式是：10000…000, 1后面有偶数个0。 那么，length - 1 的二进制形式就是01111.111, 0后面有偶数个1。最高位是0, 和hash值相“与”，结果值一定不会比数组的长度值大，因此也就不会发生数组越界。</p>
<h1 id="为什么hashmap默认大小为16">为什么HashMap默认大小为16</h1>
<p>因为负载因子的缘故，如果容量太小，就会频繁发生扩容，扩容很影响性能，因为每次扩容要进行rehash。rehash的原因是因为，我们的下标都是根据长度来的，扩容之后长度发生了变化，所以要rehash</p>
<p>如果容量设置太大浪费空间，不划算。</p>
<h1 id="为什么重写hashcode必须要重写equals">为什么重写HashCode必须要重写equals</h1>
<p>首先我们必须要知道，每个类都是继承了Object父类，假设我们不重写Hashcode和Equals，那么就会调用父类的hashcode和equals。父类的hashcode使用了navtive的hashcode方法，将对象的地址调用hashcode方法返回的值作为hashcode。</p>
<p>在这种情况下如果我们不重写equals就会出问题，因为默认的equals还是调用比较地址的“==”，假设两个对象进行hashcode地址相同，也没有重写equals。本身内容不同，但是equals比较的是地址，这个时候就会出问题</p>
<h1 id="hashmap什么时候扩容为什么负载因子是075">HashMap什么时候扩容？为什么负载因子是0.75？</h1>
<p>HashMap有一个参数为<code>loadFactor</code>，即负载因子</p>
<pre><code class="language-java">    /**
     * The load factor used when none specified in constructor.
     */
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
</code></pre>
<p>当数组的长度大于当前数组长度的0.75的时候，即假设数组长100，大于75的时候，就会扩容。</p>
<p>因为：是均衡了时间和空间损耗算出来的值，较高的值会减少空间开销（扩容减少，数组大小增长速度变慢），但增加了查找成本（hash 冲突增加，链表长度变长），不扩容的条件：数组容量 &gt; 需要的数组大小 /load factor</p>
<h1 id="hashmap什么时候链表转换为红黑树">HashMap什么时候链表转换为红黑树</h1>
<p>链表长度&gt;8且 数组长度&gt;64的时候</p>
<h1 id="为什么链表长度为8且数组长度64再转换为红黑树">为什么链表长度为8且数组长度64再转换为红黑树？</h1>
<p>链表查询的时间复杂度是 O (n)，红黑树的查询复杂度是 O (log (n))。在链表数据不多的时候，使用链表进行遍历也比较快，只有当链表数据比较多的时候，才会转化成红黑树，但红黑树需要的占用空间是链表的 2 倍，考虑到转化时间和空间损耗，所以我们需要定义出转化的边界值。</p>
<p>在考虑设计 8 这个值的时候，我们参考了泊松分布概率函数，由泊松分布中得出结论，链表各个长度的命中概率为：</p>
<pre><code class="language-text">* 0:    0.60653066
* 1:    0.30326533
* 2:    0.07581633
* 3:    0.01263606
* 4:    0.00157952
* 5:    0.00015795
* 6:    0.00001316
* 7:    0.00000094
* 8:    0.00000006
</code></pre>
<p>意思是，当链表的长度是 8 的时候，出现的概率是 0.00000006，不到千万分之一，所以说正常情况下，链表的长度不可能到达 8 ，而一旦到达 8 时，肯定是 hash 算法出了问题，所以在这种情况下，为了让 HashMap 仍然有较高的查询性能，所以让链表转化成红黑树，我们正常写代码，使用 HashMap 时，几乎不会碰到链表转化成红黑树的情况，毕竟概念只有千万分之一。</p>
<h1 id="hashmap数组的最大长度">HashMap数组的最大长度</h1>
<p>2的30次方</p>
<h1 id="jdk18中对hash算法和寻址算法如何优化的">JDK1.8中对hash算法和寻址算法如何优化的？</h1>
<p>1.8 hahMap hash算法源码</p>
<pre><code class="language-java">static final int hash(Object key){
    int h;
    return (key==null)?0:(h=key.hashCode()) ^ (h&gt;&gt;&gt;16);
}
</code></pre>
<p>假设：有一个key的hash值</p>
<pre><code class="language-java">1111 1111 1111 1111 1111 1010 0111 1100  &gt;右移十六位
0000 0000 0000 0000 1111 1111 1111 1111  &gt;右移后
1111 1111 1111 1111 0000 0101 1000 0011	 &gt; 转换为int，32位就是hash值
</code></pre>
<p>假设有一个数组，数据中有16个元素 -&gt;  hash值对数据长度进行取模，定位到数组的下标。但是寻址算法没有直接对数组长度直接取模，而是对数组长度-1的与运算(n-1) &amp; hash</p>
<p>假设n为16 即 16 &amp; hash</p>
<pre><code class="language-java">1111 1111 1111 1111 1111 1010 0111 1100 &gt;没有经过优化的hash值，直接使用hashcode算出来的原始hash值
1111 1111 1111 1111 0000 0101 1000 0011 &gt;经过优化，二进制移位异或运算后的新的hash值
   
    
0000 0000 0000 0000 0000 0000 0001 0000 &gt;16 没有经过优化的与运算和经过优化后的与运算
</code></pre>
<h3 id="为什么不取模而是进行与运算呢">为什么不取模，而是进行与运算呢？</h3>
<p>​    取模运算相对来说性能差一些，为了优化数组寻址的过程的性能，就改为使用hash值跟数组的长度-1进行与运算，效果是和hash值对n取模一样，但是与运算的性能要比hash取模要高很多。<br>
​    为什么效果一样呢？这就是个公式...因为n也就是数组的长度一直都是n的二次方，只要保持数组长度是2的n次方，就能满足这个公式hash对n取模的效果=hash与n-1</p>
<h3 id="使用没有优化过的hash与数组长度">使用没有优化过的hash与数组长度</h3>
<p>[与：1和1为1，否则为0]，与运算的时候，高十六位是没有参考价值的，因为n的大小不会很大，所以高16位都是0，和0与也是0，就没有参考价值。但是这样的话hash的高16位置就没有参与到与运算中，这样会出现什么问题呢？</p>
<pre><code class="language-java">1111 1111 1111 1111 1111 1010 0111 1100 &gt; 未优化的原始hash值
1111 1111 1111 1110 1111 1010 0111 1100 &gt; 未优化的另一个hash值
</code></pre>
<p>假设只有高16位的一个数字不同，这种情况下都和一个n进行与运算的话，很有可能导致算出来的值相同。所以我们期望低16同时保留高16位和低16位的特征。所以优化后的hash值就是高16和低16进行异或运算。可以看出来优化后两个hash差别很大</p>
<pre><code class="language-java">1111 1111 1111 1111 1111 1010 0111 1100
0000 0000 0000 0000 1111 1111 1111 1111
1111 1111 1111 1111 0000 0101 1000 0011 &gt; 优化后的hash1
    
1111 1111 1111 1110 1111 1010 0111 1100  
0000 0000 0000 0000 1111 1111 1111 1110
1111 1111 1111 1110 0000 0101 1000 0010 &gt; 优化后的hash2
</code></pre>
<p>使用优化后的对n进行与运算</p>
<pre><code class="language-java">1111 1111 1111 1111 0000 0101 1000 0011 &gt; 经过优化，二进制移位异或运算后的新的hash值

0000 0000 0000 0000 0000 0000 0001 0000 &gt; 16 
0000 0000 0000 0000 1111 1010 1000 1100 &gt; 
</code></pre>
<p>hash算法的优化就是在每个hash值中，都让高低16位进行相互的异或。让他的低16位同时保持高低16位的特征，可以尽量避免由于高十六位特征被忽略的情况下，与n异或后的数据相同，发生hash冲突</p>
<p>寻址算法的优化就是使用与运算替代取模，提升性能。</p>
<h2 id="如何解决hashmap的碰撞问题">如何解决HashMap的碰撞问题</h2>
<p>假设两个key的hash值相同，数组位置相同。这种情况就是hash碰撞。这种i情况下就将重复位置转化为链表。这样就能解决冲突问题。</p>
<p>假设get的时候发现是一个链表，遍历链表找到自己的数。如果链表很长，那就会导致复杂度为0(N)。后来进行了优化，链表到达一定的长度会转换为红黑树，时间复杂度为O(logN)</p>
<h1 id="hashmap什么时候扩容">HashMap什么时候扩容？</h1>
<p>2倍扩容</p>
<p>[16位的数组]  -&gt; [32位的数组] 可能里面的元素位置会变化，数组长度变化之后我们需要rehash即将之前的16位的hash值，重新与32-1重新计算下标存放。</p>
]]></content>
    </entry>
</feed>